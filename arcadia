#!/bin/bash
# Wrapper for all of Arcadia's modules.

# Include guard.
if [[ -z "$arcadia_loaded" ]]; then

# Save the current environment.
echo "set -o allexport" > /tmp/.arcadia_clean_env
set | egrep -v '^(BASH.*|SHELLOPTS|EUID|PPID|UID)=' >> /tmp/.arcadia_clean_env
echo "set +o allexport" >> /tmp/.arcadia_clean_env

set -o allexport +o monitor
[[ "$arcadia_trace$ARCADIA_TRACE" ]] && set -o xtrace
export SHELLOPTS

# Find Arcadia.
arcadia_bin="$(readlink -f "$0")"
this_dir="$(dirname "$arcadia_bin")"
for arcadia_dir in "$arcadia_path" "$ARCADIA_PATH" "$this_dir" \
 "$(readlink -f "$this_dir/../share/arcadia")" "$XDG_DATA_HOME/arcadia" \
 "$HOME/.local/share/arcadia"; do if [[ -f "$arcadia_dir/runners/pc" ]]; then
    arcadia_path="$arcadia_dir"
    break
fi; done; unset arcadia_dir
[[ ! -d "$arcadia_path" ]] && { echo "FATAL: Couldn't find Arcadia"; exit 1; }

# Load up all of Arcadia's stuff.
for funcs in "$arcadia_path/funcs/"*;   do . "$funcs"; done
for funcs in "$arcadia_path/runners/"*; do . "$funcs"; done
unset funcs
xinit_display=":5"
xinit_vt="09"
download_controllerdb=true
load_config
load_controllers
arcadia_loaded=1

fi

# Find the requested module.
module="$1"; shift; [[ "$module" ]] || exit
for modules_dir in "$arcadia_path" "$XDG_DATA_HOME/arcadia" \
 "$HOME/.local/share/arcadia"; do if [[ -x "$modules_dir/modules/$cmd" ]]; then
    # This is important so that scripts can detect if Arcadia's x server is
    # running; the most reliable way to do that is pgrep -f arcxinit.
    exec "$(readlink -f "$modules_dir/modules/$module")" "$@"
fi; done; unset modules_dir
die "Module $cmd not found."
