#!/bin/bash
# Functions related to running games.

# Set an environment variable and also save it to the clean env.
save_env () {
    local var="$1"
    local val="$2"
    [[ "$val" ]] || val="${!var}"
    export $var=$val
    echo "export $var='$val'" >> /tmp/.arcadia_clean_env
}

# Run a command with the environment from before loading Arcadia.
clean_env () {
    env -i "$(which bash)" <(
        echo "source /tmp/.arcadia_clean_env"
        for w in "$@"; do echo -n '"'"$w"'" '; done; echo
    );
}

# Look for a file to run, checking symlinks and known file extensions.
find_file () {
    [[ -f "$dir/$file" ]] && return 0
    file="$(basename "$(readlink -f "$dir/arcadia-game")")"
    [[ -f "$dir/$file" ]] && return 0
    local e
    for e in $exts; do
        file="$(find "$dir" -name "*.$e" -printf "%f\n" | head -n1)"
        [[ -f "$dir/$file" ]] && return 0
    done
    [[ ! -f "$dir/$file" ]] && die "Couldn't find game file."
}

run_game () {
    cd "$dir"
    
    fn game_before
    
    config_outputs
    start_padfiler
    window_watchers
    
    if is $dgpu; then
        debug_print "Using discrete GPU to play $name."
        bin optirun bash -c 'game_exec_wrap' || \
        { export DRI_PRIME=1; game_exec_wrap; }
    else debug_print "Starting $name."; fn! game_exec; fi
    
    stop_window_watchers
    stop_padfiler
    is $xinit || restore_mode
    
    fn game_after
}

# Exports primus env vars if they exist before running game_exec.
game_exec_wrap () {
    if is $dgpu; then
        save_env DRI_PRIME
        save_env BUMBLEBEE_SOCKET
        save_env PRIMUS_DISPLAY
        save_env PRIMUS_libGLa
        save_env PRIMUS_libGLd
        save_env LD_LIBRARY_PATH
    fi
    fn! game_exec
}

# Disable compositor on various WMs if compositing is enabled.
stop_compositor () {
    is $disable_compositor || return
    if pgrep compton; then
        compositor=compton
        compton_args="$(cat /proc/$(pgrep -n compton)/cmdline)"
        pkill compton
    elif pgrep xfwm4; then
        if is $(xfconf-query -c xfwm4 -p /general/use_compositing); then
            compositor=xfwm4
            xfconf-query -c xfwm4 -p /general/use_compositing -t bool -s false
        fi
    # TODO: More WMs
    fi
}

# Restart compositor based on what was found in stop_compositor.
restart_compositor () {
    is $disable_compositor || return
    case $compositor in
        compton) $compton_args & disown ;;
        xfwm4)
            xfconf-query -c xfwm4 -p /general/use_compositing -t bool -s true ;;
        # TODO: More WMs
    esac
}

# Activate padfiler functionality if it's installed.
start_padfiler () {
    if [[ "$padfile" ]] && bin padfiler; then
        debug_print "Starting padfiler: $padfile $padfile2"
        padfiler start "$padfile" "$padfile2"
    else
        [[ "$lock_js" ]] && padfiler lock-js
        [[ "$lock_event" ]] && padfiler lock-event
    fi
}

stop_padfiler () {
    if [[ "$padfile" ]] && bin padfiler; then
        debug_print "Stopping padfiler"
        padfiler stop
    elif [[ "$lock_js$lock_event" ]]; then padfiler unlock
    fi
}

window_watchers () {
    if [[ -d "$devilspie2_dir" ]]; then
        debug_print "Starting devilspie2 in $devilspie2_dir"
        bin devilspie2 -f "$devilspie2_dir" &
        devilspie2_pid=$!
    elif [[ -f "$kpie_file" ]]; then
        debug_print "Starting kpie with $kpie_file"
        bin kpie "$kpie_file" &
        kpie_pid=$!
    fi
    return 0
}
stop_window_watchers () { kill $devilspie2_pid $kpie_pid; return 0; }
