#!/bin/bash
# Functions for loading metadata.

# Automatically detect platform from folder name, otherwise attempt
# to load the platform meta.
check_platform () {
    debug_print "Detecting platform for $1"
    local dir=$(basename "$1")
    case "${dir,,}" in
    linux|lnx|native)                         platform="linux" ;;
    windows|wine|win)                         platform="win"   ;;
    dos|msdos|dosbox)                         platform="dos"   ;;
    arcade|arc)                               platform="arc"   ;;
    nintendo|famicom|nes|fam)                 platform="nes"   ;;
    super\ nintendo|super\ famicom|snes|sfc)  platform="snes"  ;;
    genesis|megadrive|gen|md)                 platform="gen"   ;;
    saturn|sat)                               platform="sat"   ;;
    playstation|playstation\ 1|ps1|psx)       platform="psx"   ;;
    nintendo\ 64|n64)                         platform="n64"   ;;
    dreamcast|dc|sdc)                         platform="sdc"   ;;
    playstation\ 2|ps2)                       platform="ps2"   ;;
    xbox)                                     platform="xbox"  ;;
    gamecube|gcn)                             platform="gcn"   ;;
    wii)                                      platform="wii"   ;;
    game\ boy|gameboy|gb)                     platform="gb"    ;;
    game\ geargamegear|gg)                    platform="gg"    ;;
    game\ boy\ advance|gameboy\ advance|gba)  platform="gba"   ;;
    nintendo\ ds|nds)                         platform="nds"   ;;
    playstation\ portable|psp)                platform="psp"   ;;
    *) include "$1/arcadia-platform.meta" ;; 
    esac
    [[ "$platform" ]] || { debug_print "Platform not recognized"; return 1; }
    debug_print "Platform detected as $platform"
    return 0
}
check_platform! () { check_platform "$1" || die "Couldn't detect platform"; }

load_platform () {
    debug_print "Loading platform meta for $1"
    plat_base=$(basename "$1")
    get_exts $platform
    include "$1/arc-platform.meta"
}

# Get a list of extensions that are associated with the platform to assist
# with file detection.
get_exts () {
    case "$1" in
    linux)
        exts=(sh)
        case $(uname -m) in
        x86_64) exts+=(x86_64 x64) ;&
        i?86)   exts+=(x86) ;;
        esac
        exts+=(bin run)
        ;;
    win)  ;&
    dos)  exts=(bat exe BAT EXE) ;;
    nes)  exts=(nes) ;;
    gen)  exts=(smd bin) ;;
    snes) exts=(smc sfc) ;;
    n64)  exts=(n64 z64) ;;
    sat|sdc|psx|ps2|xbox|gcn|wii|psp)
          exts=(cue iso bin) ;;
    gb)   exts=(gb) ;;
    gg)   exts=(gg) ;;
    gba)  exts=(gba) ;;
    nds)  exts=(nds) ;;
    esac
}

is_game () {
    local game=$(readlink -f "$1")
    local base=$(basename "$game")
    [[ "$base" =~ ^\. ]] && return 1
    [[ "$base" = "arc"*"platform.meta" ]] && return 1
    [[ "$base" = @(icons|boxarts|screenshots) ]] && return 1
    ( [[ -d "$game" ]] || [[ "${game##*.}" = "meta" ]] || \
     val_in_array "${game##*.}" exts ) || return 1
    return 0
}

# Infer information about the game and load metas if present.
load_game () {
    local game=$(readlink -f "$1")
    is_game "$game" || { debug_print "$game is not a game"; return 1; }
    debug_print "Loading game meta for $1"
    if [[ ! -e "$game" ]]; then die "Target game does not exist"
    elif [[ -d "$game" ]]; then
        base=$(basename "$game")
        name="$base"
        dir="$game"
        include "$game/arcadia-game.meta"
        images_dir="$dir"
    elif [[ -f "$game" ]]; then
        dir=$(dirname "$game")
        images_dir="$dir/.images"
        file=$(basename "$game")
        base="${file%.*}"
        name="$base"
        include "$dir/$base.meta"
        include "$dir/.$base.meta"
        [[ "${game##*.}" == "meta" ]] && . "$game"
    else return 1; fi
    return 0
}

# Check various icon folders for the specified image type.
find_image () {
    local type="$1"
    [[ -e "${!type}" ]] && return 0
    for e in png jpg gif ico bmp; do
        for n in "$type.$e" ".$type.$e" \
         "arcadia-$type.$e" ".arcadia-$type.$e"; do
            debug_print "Looking for $type: $n in $dir"
            [[ -e "$dir/$n" ]] && { eval "$type=\"$dir/$n\""; return 0; }
        done
        for d in "$dir/${type}s" "$dir/.${type}s"; do
            debug_print "Looking for $type: $base.$e in $d"
            [[ -e "$d/$base.$e" ]] && { eval "$type=\"$d/$base.$e\""
                return 0; }
        done
    done
    return 1
}
