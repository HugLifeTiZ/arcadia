#!/bin/bash
# Functions for loading metadata.

# This function gets redefined when it's time to actually load the game.
select_file () { true; }

# Loads up the metas for a given game.
load_game () {
    game="${1:?}"
    find_game "$game"
    check_platform! "$(dirname "$game")"
    load_platform "$(dirname "$game")"
    load_game_file "$game" || die "Failed to load $game."
    set_runner "${platform:-}"
    if [[ ! "${steam_id:-}" ]]; then find_file; fi
    export arcadia_game="${game}"
}

# Finds a game if given only a name.
find_game () {
    game="$(readlink -f "$1")"
    [[ -e "$game" ]] && return
    [[ -d "${games_dir:-}" ]] || die "Set games_dir to use short names."
    game=$(find "${games_dir:-}" -type d -name "${1:-}" | head -1)
    [[ -e "$game" ]] || game=$(find "${games_dir:-}" -type f -name "${1:-}.meta")
    [[ -e "$game" ]] || die "Unable to find game."
}

# Automatically detect platform from folder name, otherwise attempt
# to load the platform meta.
check_platform () {
    debug_print "Detecting platform for ${1:-}"
    local dir; dir=$(basename "${1:-}"); platform=""
    case "${dir,,}" in
    linux|lnx|native)                         platform="linux" ;;
    windows|wine|win)                         platform="win"   ;;
    dos|msdos|dosbox)                         platform="dos"   ;;
    arcade|arc)                               platform="arc"   ;;
    nintendo|famicom|nes|fam)                 platform="nes"   ;;
    super\ nintendo|super\ famicom|snes|sfc)  platform="snes"  ;;
    genesis|megadrive|gen|md)                 platform="gen"   ;;
    saturn|sat)                               platform="sat"   ;;
    playstation|playstation\ 1|ps1|psx)       platform="psx"   ;;
    nintendo\ 64|n64)                         platform="n64"   ;;
    dreamcast|dc|sdc)                         platform="sdc"   ;;
    playstation\ 2|ps2)                       platform="ps2"   ;;
    xbox)                                     platform="xbox"  ;;
    gamecube|gcn)                             platform="gcn"   ;;
    wii)                                      platform="wii"   ;;
    game\ boy|gameboy|gb)                     platform="gb"    ;;
    game\ geargamegear|gg)                    platform="gg"    ;;
    game\ boy\ advance|gameboy\ advance|gba)  platform="gba"   ;;
    nintendo\ ds|nds)                         platform="nds"   ;;
    playstation\ portable|psp)                platform="psp"   ;;
    *) include "${1:-}/arcadia-platform.meta" ;; 
    esac
    [[ "$platform" ]] || { debug_print "Platform not recognized"; return 1; }
    debug_print "Platform detected as $platform"
    return 0
}

load_platform () {
    platform_dir="${1:-}"
    debug_print "Loading platform meta for $platform_dir"
    platform_base="$(basename "$platform_dir")"  # shellcheck disable=SC2034
    get_exts "${platform:-}"
    include "$platform_dir/arcadia-platform.meta" || true
}

# Get a list of extensions that are associated with the platform to assist
# with file detection.
declare -a exts
get_exts () {
    exts=()
    case "${1:-}" in
    linux)
        exts=(sh)
        case "$(uname -m)" in
        x86_64) exts+=" x86_64 x64" ;&
        i?86)   exts+=" x86" ;;
        esac
        exts+=(bin run)
        ;;
    win)  ;&
    dos)  exts=(bat exe BAT EXE) ;;
    arc)  exts=(zip) ;;
    nes)  exts=(nes zip) ;;
    gen)  exts=(smd gen bin zip) ;;
    snes) exts=(smc sfc zip) ;;
    n64)  exts=(n64 z64 zip) ;;
    sat|sdc|psx|ps2|xbox|gcn|wii|psp)
          exts=(cue iso ccd bin)
          case "${1:-}" in  # Compressed formats.
          ps2)     exts+=(gz cso) ;;
          gcn|wii) exts+=(gcz) ;;
          esac ;;
    gb)   exts=(gb zip) ;;
    gg)   exts=(gg zip) ;;
    gba)  exts=(gba zip) ;;
    nds)  exts=(nds zip) ;;
    esac
}

# Look for a file to run, checking symlinks and known file extensions.
declare -a exts
find_file () {
    [[ -f "${dir:-}/${file:-}" ]] && return 0
    file="$(basename "$(readlink -f "${dir:-}/arcadia-game")")"
    [[ -f "${dir:-}/$file" ]] && return 0
    local e
    for e in "${exts[@]}"; do
        file="$(find "${dir:-}" -maxdepth 1 -name "*.$e" -printf "%f\n" | head -n1)"
        [[ -f "${dir:-}/$file" ]] && return 0
    done
    [[ ! -f "${dir:-}/$file" ]] && die "Couldn't find game file."
}

# Return 0 if the given file or directory is a game.
is_game () {
    local game; game="$(readlink -f "${1:-}")"
    local base; base="$(basename "$game")"
    [[ "$base" =~ ^\. ]] && return 1
    [[ "$base" = "arcadia-platform.meta" ]] && return 1
    [[ "$base" = @(icons|boxarts|screenshots) ]] && return 1
    ( [[ -d "$game" ]] || [[ "${game##*.}" = "meta" ]] || \
     val_in_list "${game##*.}" "${exts[@]}" ) || return 1
    return 0
}

# Infer information about the game and load metas if present.
load_game_file () {
    local game; game=$(readlink -f "${1:-}")
    is_game "$game" || { debug_print "$game is not a game"; return 1; }
    debug_print "Loading game meta for ${1:-}"
    if [[ ! -e "$game" ]]; then die "Target game does not exist"
    elif [[ -d "$game" ]]; then
        base="$(basename "$game")"
        name="$base"  # shellcheck disable=SC2034
        dir="$game"
        include "$game/arcadia-game.meta"
        images_dir="$dir"  # shellcheck disable=SC2034
    elif [[ -f "$game" ]]; then
        dir="$(dirname "$game")"
        images_dir="$dir/.images"  # shellcheck disable=SC2034
        file="$(basename "$game")"
        base="${file%.*}"
        name="$base"  # shellcheck disable=SC2034
        include "$dir/$base.meta"
        include "$dir/.$base.meta"
        [[ "${game##*.}" == "meta" ]] && . "$game"
    else return 1; fi
    return 0
}
