#!/bin/bash
# Utility and convenience functions.

# Print to stdout if env vars are enabled.
debug_print () { if [[ "${ARCADIA_DEBUG:-}" ]]; then echo "DEBUG: $*" >&2; fi; }

die () { echo "FATAL: $*"; exit 1; }
assert () { if ! test "$@"; then die "Assertion $* failed"; fi; }
# Checks to see if a value is any kind of true.
is () { local a="${1:-}"; [[ "${a,,}" =~ yes|on|true|^[0-9]*[1-9][0-9]*$ ]]; }
# Shushes a command. All output directed to /dev/null.
shh () { "$@" >/dev/null 2>&1; }

# Returns true if a value is in the given list.
val_in_list () {
    local e
    for e in "${@:2}"; do [[ "$e" == "${1:-}" ]] && return 0; done
    return 1
}

# Converts a title to a filename-friendly name.
# Not actually used anywhere yet, though...
sanitize_title () {
    echo "$@" | cut -d: -f1 | awk -F' - ' '{print $1}' | \
     tr '[:upper:]' '[:lower:]' | tr -s '[:blank:]' _ | tr -d "'" | \
     sed -e 's:+:-plus:g' -e 's:&:and:g'
}

# Check if a number of the given files exist.
exists () {
    count=0; targ="${1:?}"; shift
    for f in "$@"; do if [[ -e "$f" ]]; then ((count++)); fi; done
    [[ $count -ge 2 ]]
}

# Checks to see if a user function is set and if so, runs it.
fn () {
    set +eu +o pipefail
    if [[ "$(type -t "${1:-}")" = "function" ]]; then
        debug_print "Running ${1:-}"
        "$@"
    fi; set -eu -o pipefail; return 0
}

# Sources specified files if they exist. Returns 1 if any are missing.
include () {
    local code=0; local incl
    for incl in "$@"; do if [[ -f "$incl" ]]; then
        debug_print "Loading $incl"; . "$incl"
        else debug_print "Could not find $incl"; code=1
    fi; done
    return $code
}
