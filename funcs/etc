#!/bin/bash
# Utility functions.

# Print to stdout if env vars are enabled.
debug_print () {
    [[ "$arcadia_debug$ARCADIA_DEBUG" ]] && echo "DEBUG: $*"
    return 0
}

die () { echo "FATAL: $*"; exit 1; }
assert () { test "$@" || die "Assertion $* failed"; }

# Checks to see if a value is any kind of true.
is () {
    case "${1,,}" in
        "yes")     ;&
        "on")      ;&
        "true")    ;&
        "enabled") return 0
    esac
    [[ $1 -gt 0 ]] && return 0
    return 1
}

# Checks to see if a function is set and if so, runs it.
fn () {
    if [[ "$(type -t $1)" = "function" ]]; then
        debug_print "Running $1"
        "$@"
    else return 1; fi
}
fn! () { fn "$@" || die "Couldn't run $1"; }

# Sources specified files if they exist. Returns 1 if any are missing.
include () {
    local code=0; local incl
    for incl in "$@"; do if [[ -f "$incl" ]]; then
        debug_print "Loading $incl"; . "$incl"
        else debug_print "Could not find $incl"; code=1
    fi; done
    return $code
}
include! () { include "$1" || die "Couldn't source $1"; }

# Find a binary and optionally execute it with args.
bin () {
    local bin=$1; shift
    local bin_var="${bin}_bin"
    [[ ! -x "${!bin_var}" ]] && {
        debug_print "Searching for program: $bin"
        eval "$bin_var=\"$(which $bin)\""
    }
    [[ ! -x "${!bin_var}" ]] && return 1
    [[ $# -gt 0 ]] && ${!bin_var} "$@"
    return 0  # We don't want to return the program's error code.
}
bin! () { bin "$@" || die "Couldn't find $1"; }

# Shushes a command. All output directed to /dev/null.
shh () { "$@" >/dev/null 2>&1; }

# Returns true if a value is in the given list.
val_in_list () {
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

# Converts a title to a filename-friendly name.
sanitize_title () {
    echo $* | cut -d: -f1 | awk -F' - ' '{print $1}' | \
     tr [:upper:] [:lower:] | tr -s [:blank:] - | tr -d "'" | \
     sed s:+:-plus:g
}

# Requests a config directory. If it doesn't exist, make it.
config_dir () {
    [[ ! -d "$XDG_CONFIG_HOME" ]] && XDG_CONFIG_HOME="$HOME/.config"
    [[ ! -d "$XDG_CONFIG_HOME/$1" ]] && {
        mkdir -p "$XDG_CONFIG_HOME/$1" || die "Couldn't make $1 config dir."
    }
    echo "$XDG_CONFIG_HOME/$1"
}

# Requests a data directory. If it doesn't exist, make it.
data_dir () {
    [[ ! -d "$XDG_DATA_HOME" ]] && XDG_DATA_HOME="$HOME/.local/share"
    [[ ! -d "$XDG_DATA_HOME/$1" ]] && {
        mkdir -p "$XDG_DATA_HOME/$1" || die "Couldn't make $1 data dir."
    }
    echo "$XDG_DATA_HOME/$1"
}

# Loads up the user configuration and makes assumptions if info is missing.
load_config () {
    conf_dir="$(config_dir arcadia)"
    if [[ ! -f "$conf_dir/config" ]]; then
        echo "IMPORTANT: No configuration found; assumptions will be made!"
    fi
    include "$conf_dir/config" "$conf_dir/bins" "$conf_dir/funcs" \
     "$conf_dir/runners" "$conf_dir/manual"
    if [[ ! -d "$games_dir" ]]; then
        debug_print "No games directory defined; assuming $HOME/Games"
        games_dir="$HOME/Games"
        [[ ! -d "$games_dir" ]] || mkdir -p "$games_dir"
    fi
    if [[ ! -d "$saves_dir" ]]; then
        debug_print "No saves directory defined; assuming $games_dir/Saves"
        saves_dir="$games_dir/Saves"
        [[ ! -d "$saves_dir" ]] || mkdir -p "$saves_dir"
    fi
}

# Downloads gamecontrollerdb.txt and adds both it and the user db to the env.
load_controllers () {
    local tmp="$(mktemp)"
    shh wget -O "$tmp" "https://raw.githubusercontent.com/gabomdq/" \
     +"SDL_GameControllerDB/master/gamecontrollerdb.txt" && \
     mv "$tmp" "$conf_dir/gamecontrollerdb.txt" || rm "$tmp"
    [[ -f "$conf_dir/gamecontrollerdb.txt" ]] && \
     SDL_GAMECONTROLLERCONFIG="$SDL_GAMECONTROLLERCONFIG
$(cat "$conf_dir/gamecontrollerdb.txt")"
    [[ -f "$conf_dir/usercontrollerdb.txt" ]] && \
     SDL_GAMECONTROLLERCONFIG="$SDL_GAMECONTROLLERCONFIG
$(cat "$conf_dir/usercontrollerdb.txt")"
    echo "export SDL_GAMECONTROLLERCONFIG=\"$SDL_GAMECONTROLLERCONFIG\"" \
     >> /tmp/.arcadia_clean_env
}

# Check to see if the computer is on AC (0) or battery (1).
check_power () {
    local power="$(cat /sys/class/power_supply/AC0/online)"
    if test $power -eq 1 -o -z "$power"
    then debug_print "Computer is on AC"; return 0
    else debug_print "Computer is on battery"; return 1; fi
}
